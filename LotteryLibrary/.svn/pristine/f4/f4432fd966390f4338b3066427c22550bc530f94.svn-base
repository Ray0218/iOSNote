//
//  lottery_ytdj.cpp
//  LotteryLibrary
//
//  Created by wufan on 15/4/29.
//  Copyright (c) 2015å¹´ DACAI. All rights reserved.
//

#include "lottery_ytdj.h"
#include "smart_basket.h"
#include "error_code.h"
#include "toolkit.h"

namespace lottlib {
    
    LotteryYtdj::LotteryYtdj() {
        basket_ = new SmartBasket();
    }
    
    LotteryYtdj::~LotteryYtdj() {
        delete basket_;
    }
    
    
    int LotteryYtdj::NotesCalculate(YtdjSubtype subtype, int num1[YTDJ_NUMBER_COUNT], int num2[YTDJ_NUMBER_COUNT], int num3[YTDJ_NUMBER_COUNT], int num4[YTDJ_NUMBER_COUNT]) {
        int count1 = 0, count2 = 0, count3 = 0, count4 = 0;
        for (int i = 0; i < YTDJ_NUMBER_COUNT; i++) {
            count1 += num1[i] ? 1 : 0;
            count2 += num2[i] ? 1 : 0;
            count3 += num3[i] ? 1 : 0;
            count4 += num4[i] ? 1 : 0;
        }
        
        int counts[4] = { count1, count2, count3, count4 };
        int indexs[] = {0, 1, 2, 3};
        
        switch (subtype) {
            case YTDJ_SUBTYPE_RENXUAN1:
                return count1 + count2 + count3 + count4;
            case YTDJ_SUBTYPE_RENXUAN2: {
                std::vector<int *> *groups = math::create_combination_groups(indexs, 4, 2);
                int note = 0;
                for (int i = 0; i < groups->size(); i++) {
                    int *opt = groups->at(i);
                    note += counts[opt[0]] * counts[opt[1]];
                }
                math::release_combination_groups(groups);
                return note;
            }
            case YTDJ_SUBTYPE_RENXUAN3: {
                std::vector<int *> *groups = math::create_combination_groups(indexs, 4, 3);
                int note = 0;
                for (int i = 0; i < groups->size(); i++) {
                    int *opt = groups->at(i);
                    note += counts[opt[0]] * counts[opt[1]] * counts[opt[2]];
                }
                math::release_combination_groups(groups);
                return note;
            }
            case YTDJ_SUBTYPE_ZHIXUAN: {
                return count1 * count2 * count3 * count4;
            }
            case YTDJ_SUBTYPE_ZUXUAN24:
            case YTDJ_SUBTYPE_ZUXUAN12:
            case YTDJ_SUBTYPE_ZUXUAN6:
            case YTDJ_SUBTYPE_ZUXUAN4:
                break;
            default:
                break;
        }
        return 0;
    }
    
    int LotteryYtdj::GetTarget(int index, YtdjSubtype &subtype, int &note, int num1[YTDJ_NUMBER_COUNT], int num2[YTDJ_NUMBER_COUNT], int num3[YTDJ_NUMBER_COUNT], int num4[YTDJ_NUMBER_COUNT]) {
        int target[CELL_TARGET_NUM_MAX_LEN] = { 0 };
        int type = 0;
        int ret = basket_->GetTarget(index, type, note, target);
        if (ret >= 0) {
            subtype = static_cast<YtdjSubtype>(type);
            memcpy(num1, target + YTDJ_NUMBER_COUNT * 0, sizeof(int) * YTDJ_NUMBER_COUNT);
            memcpy(num2, target + YTDJ_NUMBER_COUNT * 1, sizeof(int) * YTDJ_NUMBER_COUNT);
            memcpy(num3, target + YTDJ_NUMBER_COUNT * 2, sizeof(int) * YTDJ_NUMBER_COUNT);
            memcpy(num4, target + YTDJ_NUMBER_COUNT * 3, sizeof(int) * YTDJ_NUMBER_COUNT);
        }
        return ret;
    }
    
    int LotteryYtdj::AddTarget(YtdjSubtype subtype, int num1[YTDJ_NUMBER_COUNT], int num2[YTDJ_NUMBER_COUNT], int num3[YTDJ_NUMBER_COUNT], int num4[YTDJ_NUMBER_COUNT]) {
        int note = NotesCalculate(subtype, num1, num2, num3, num4);
        if (note <= 0) {
            return ERROR_INVAILD_LOTTERY;
        }
        int target[CELL_TARGET_NUM_MAX_LEN] = { 0 };
        memcpy(target + YTDJ_NUMBER_COUNT * 0, num1, sizeof(int) * YTDJ_NUMBER_COUNT);
        memcpy(target + YTDJ_NUMBER_COUNT * 1, num2, sizeof(int) * YTDJ_NUMBER_COUNT);
        memcpy(target + YTDJ_NUMBER_COUNT * 2, num3, sizeof(int) * YTDJ_NUMBER_COUNT);
        memcpy(target + YTDJ_NUMBER_COUNT * 3, num4, sizeof(int) * YTDJ_NUMBER_COUNT);
        return basket_->AddTarget(subtype, note, target);
    }
    
    int LotteryYtdj::ModifyTarget(int index, YtdjSubtype subtype, int num1[YTDJ_NUMBER_COUNT], int num2[YTDJ_NUMBER_COUNT], int num3[YTDJ_NUMBER_COUNT], int num4[YTDJ_NUMBER_COUNT]) {
        int note = NotesCalculate(subtype, num1, num2, num3, num4);
        if (note <= 0) {
            return ERROR_INVAILD_LOTTERY;
        }
        int target[CELL_TARGET_NUM_MAX_LEN] = { 0 };
        memcpy(target + YTDJ_NUMBER_COUNT * 0, num1, sizeof(int) * YTDJ_NUMBER_COUNT);
        memcpy(target + YTDJ_NUMBER_COUNT * 1, num2, sizeof(int) * YTDJ_NUMBER_COUNT);
        memcpy(target + YTDJ_NUMBER_COUNT * 2, num3, sizeof(int) * YTDJ_NUMBER_COUNT);
        memcpy(target + YTDJ_NUMBER_COUNT * 3, num4, sizeof(int) * YTDJ_NUMBER_COUNT);
        return basket_->ModifyTarget(index, subtype, note, target);
    }
    
    int LotteryYtdj::DeleteTarget(int index) {
        return basket_->DeleteTarget(index);
    }
    
    int LotteryYtdj::GetTargetCount() {
        return basket_->GetTargetCount();
    }
    
    int LotteryYtdj::GetTotalNotes() {
        return basket_->GetTotalNotes();
    }
}